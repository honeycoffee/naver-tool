<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.naver.pubtrans.itn.api.repository.MemberRepository">

 
    <select id="checkDuplicate" parameterType="String" resultType="int">
    	SELECT
			count(*)
		FROM
			tb_z_svc_member
		WHERE
			user_id = #{userId}
    </select>	
    
	<insert id="insertMember" parameterType="com.naver.pubtrans.itn.api.vo.member.input.MemberInputVo">
		INSERT INTO 
			tb_z_svc_member(user_id, user_name, encoded_user_pw, company) 
		VALUES
			(#{userId}, #{userName}, #{userPw}, #{company})
	</insert>
    
	<update id="updateMember" parameterType="com.naver.pubtrans.itn.api.vo.member.input.MemberInputVo">
		UPDATE
			tb_z_svc_member
		SET
			user_name = #{userName}
			, company = #{company}
			<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(userPw)">
			, encoded_user_pw = #{userPw} 
			</if>
			, upd_date = now()
		WHERE
			user_id = #{userId}
	</update>
    
	<update id="deleteMember" parameterType="com.naver.pubtrans.itn.api.vo.member.input.MemberSearchVo">
		UPDATE
			tb_z_svc_member
		SET
			delete_yn = 'Y'
			, upd_date = now()
		WHERE
			user_id = #{userId}
	</update>
    
	<delete id="deleteTestMember" parameterType="com.naver.pubtrans.itn.api.vo.member.input.MemberSearchVo">
		DELETE FROM
			tb_z_svc_member
		WHERE
			user_id = #{userId}
	</delete>
    
	<delete id="deleteTestMemberAuthority" parameterType="com.naver.pubtrans.itn.api.vo.member.input.MemberSearchVo">
		DELETE FROM
			tb_z_svc_member_authority
		WHERE
			user_id = #{userId}
	</delete>
    
    <select id="getMember" parameterType="com.naver.pubtrans.itn.api.vo.member.input.MemberSearchVo" resultType="com.naver.pubtrans.itn.api.vo.member.output.MemberOutputVo">
    	SELECT
		    member.user_id
		    , member.encoded_user_pw
		    , member.user_name
		    , member.company
		    , date_format(member.reg_date, '%Y.%m.%d') as reg_date
            , date_format(member.upd_date, '%Y.%m.%d') as upd_date 
            , auth.authority_id
            , info.authority_name
		FROM
			tb_z_svc_member `member`
			, tb_z_svc_member_authority `auth`
			, tb_z_svc_authority_info `info`
		WHERE
			member.user_id = auth.user_id
		AND
			auth.authority_id = info.authority_id
		AND
			member.user_id = #{userId}
    </select>
	
	<select id="getMemberListTotalCount" parameterType="com.naver.pubtrans.itn.api.vo.member.input.MemberSearchVo" resultType="com.naver.pubtrans.itn.api.vo.member.output.MemberCountOutputVo">
		SELECT
			count(*) as total_list_count
			, SUM(if(auth.authority_id='ROLE_ADMIN', 1, 0)) as total_admin_count
			, SUM(if(auth.authority_id='ROLE_USER', 1, 0)) as total_user_count
			, SUM(if(auth.authority_id='ROLE_ANONYMOUS', 1, 0)) as total_anonymous_count
		FROM
			tb_z_svc_member `member`
			, tb_z_svc_member_authority `auth`
			, tb_z_svc_authority_info `info`
		WHERE
			member.user_id = auth.user_id
		AND
			auth.authority_id = info.authority_id

		<include refid="whereMemberList" />
	</select>

	<select id="selectMemberList" parameterType="com.naver.pubtrans.itn.api.vo.member.input.MemberSearchVo" resultType="com.naver.pubtrans.itn.api.vo.member.output.MemberOutputVo">
		SELECT
			member.user_id
			, member.user_name
			, member.company
			, date_format(member.reg_date, '%Y.%m.%d') as reg_date
			, auth.authority_id
			, info.authority_name
		FROM
			tb_z_svc_member `member`
			, tb_z_svc_member_authority `auth`
			, tb_z_svc_authority_info `info`
		WHERE
			member.user_id = auth.user_id
		AND
			auth.authority_id = info.authority_id

		<include refid="whereMemberList" />

		ORDER BY
			<choose>
				<when test="@org.apache.commons.lang3.StringUtils@isNotEmpty(sortKey)">
					<choose>
						<when test="sortKey.equals('user_name')">
							member.user_name ${sortType}
						</when>
						<when test="sortKey.equals('company')">
							member.company ${sortType}
						</when>
						<when test="sortKey.equals('reg_date')">
							member.reg_date ${sortType}
						</when>
						<when test="sortKey.equals('authority_id')">
							FIELD(auth.authority_id, 'ROLE_ADMIN', 'ROLE_USER') ${sortType}
						</when>
						<otherwise>
							FIELD(auth.authority_id, 'ROLE_ADMIN', 'ROLE_USER') asc, member.reg_date asc
						</otherwise>
					</choose>
				</when>
				<otherwise>
					FIELD(auth.authority_id, 'ROLE_ADMIN', 'ROLE_USER') asc, member.reg_date asc 
				</otherwise>
			</choose>

		LIMIT
			#{startPageLimit}, #{endPageLimit}
	</select>


	<sql id="whereMemberList">

		<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(userName)">
			AND member.user_name LIKE CONCAT(#{userName}, '%')
		</if>
		
		<if test="@org.apache.commons.lang3.StringUtils@isNotEmpty(authorityId)">
			AND auth.authority_id LIKE CONCAT(#{authorityId}, '%')
		</if>

	</sql>
    
	<insert id="insertMemberAuthority" parameterType="com.naver.pubtrans.itn.api.vo.member.input.MemberInputVo">
		INSERT INTO 
			tb_z_svc_member_authority(user_id, authority_id) 
		VALUES
			(#{userId}, #{authorityId})
	</insert>
    
	<update id="updateMemberAuthority" parameterType="com.naver.pubtrans.itn.api.vo.member.input.MemberInputVo">
		UPDATE
			tb_z_svc_member_authority
		SET
			authority_id = #{authorityId}
		WHERE
			user_id = #{userId}
	</update>
	
	<select id="selectMemberAuthorityList" parameterType="com.naver.pubtrans.itn.api.vo.member.input.MemberSearchVo" resultType="com.naver.pubtrans.itn.api.vo.member.output.MemberAuthorityOutputVo">
		SELECT
			info.authority_id
			, info.authority_name
		FROM
			tb_z_svc_member_authority `auth`
			, tb_z_svc_authority_info `info`
		WHERE
			auth.authority_id = info.authority_id
		AND
			auth.user_id = #{userId}
	</select>

</mapper>