<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.naver.pubtrans.itn.api.repository.BusGraphRepository">


	<select id="selectBusStopGraphList" parameterType="java.util.List" resultType="com.naver.pubtrans.itn.api.vo.bus.graph.BusStopGraphVo">
		SELECT
			<include refid="selectCommonBusStopGraph" />
		FROM
			tb_stop_graph graph
		LEFT JOIN
			tb_stops startStop on startStop.stop_id = graph.start_stop_id
		LEFT JOIN
			tb_stops endStop on endStop.stop_id = graph.end_stop_id
		WHERE
			<foreach collection="list" item="item" index="index" separator="or" open="(" close=")" >
				(graph.start_stop_id = #{item.startStopId} AND graph.end_stop_id = #{item.endStopId})
	        </foreach>
	</select>

	<select id="selectBusRouteGraphList" parameterType="int" resultType="com.naver.pubtrans.itn.api.vo.bus.graph.BusStopGraphVo">
		SELECT
			<include refid="selectCommonBusStopGraph" />
			, route.stop_sequence
			, route.up_down
			, route.sum_distance
			, graph.distance
		FROM
			tb_route_stops route, tb_stop_graph graph
		LEFT JOIN
			tb_stops startStop on startStop.stop_id = graph.start_stop_id
		LEFT JOIN
			tb_stops endStop on endStop.stop_id = graph.end_stop_id
		WHERE
			route.route_id = #{routeId}
			AND route.graph_id = graph.graph_id
		ORDER BY
			route.stop_sequence
	</select>


	<sql id="selectCommonBusStopGraph">
		graph.graph_id
	    , graph.start_stop_id
	    , graph.end_stop_id
	    , startStop.stop_name as start_stop_name
        , endStop.stop_name as end_stop_name
	    , ST_AsText(graph.graph_info) as graph_info
	    , ST_AsGeoJSON((graph.graph_info), 14) as graph_info_to_geo_json
	</sql>

	<select id="geBusRouteGraphTaskListCnt" parameterType="long" resultType="int">
		SELECT
			count(*) as total_list_cnt
		FROM
			tb_route_stops_task route, tb_stop_graph graph
		WHERE
			route.task_id = #{taskId}
			AND route.graph_id = graph.graph_id
		ORDER BY
			route.stop_sequence
	</select>

	<select id="selectBusRouteGraphTaskList" parameterType="long" resultType="com.naver.pubtrans.itn.api.vo.bus.graph.BusStopGraphVo">
		SELECT
			graph.graph_id
		    , graph.start_stop_id
		    , graph.end_stop_id
		    , startStop.stop_name as start_stop_name
		    , endStop.stop_name as end_stop_name
		    , ST_AsText(if(isnull(gt.graph_info), graph.graph_info, gt.graph_info)) as graph_info
		    , ST_AsGeoJSON((if(isnull(gt.graph_info), graph.graph_info, gt.graph_info)), 14) as graph_info_to_geo_json
			, route.stop_sequence
		FROM
			tb_route_stops_task route, tb_stop_graph graph
		LEFT JOIN
			tb_stops startStop on startStop.stop_id = graph.start_stop_id
		LEFT JOIN
			tb_stops endStop on endStop.stop_id = graph.end_stop_id
		LEFT JOIN
			tb_stop_graph_task gt on gt.task_id = #{taskId} and gt.start_stop_id = graph.start_stop_id and gt.end_stop_id = graph.end_stop_id
		WHERE
			route.task_id = #{taskId}
			AND route.graph_id = graph.graph_id
		ORDER BY
			route.stop_sequence
	</select>

	<insert id="insertBusStopGraphTask" parameterType="com.naver.pubtrans.itn.api.vo.bus.graph.input.BusStopGraphTaskInputVo">
		INSERT INTO tb_stop_graph_task
			(task_id, graph_id, start_stop_id, end_stop_id, graph_info, distance)
		VALUES
			(#{taskId}, #{graphId}, #{startStopId}, #{endStopId}, ST_GeomFromText(#{graphInfo}), #{distance})
	</insert>

</mapper>